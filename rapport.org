#+TITLE: Rapport bonus Imhof
#+AUTHOR: Romain Gehrig
#+LATEX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage{xfrac}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage[bottom=10em]{geometry}
#+LATEX_HEADER: \setlength{\parindent}{2em}
#+LATEX_HEADER: \setlength{\parskip}{1em}
#+LATEX_HEADER: \renewcommand{\baselinestretch}{1.5}
#+OPTIONS: toc:nil
#+attr_latex: :environment tabulary :width \textwidth

[[./interlaken_3d.png]]

* Concept: Vue 3D de la carte

L'idée intiale venait du fait que l'on possède les données en 3 dimensions des zones dont on génère les
cartes ainsi que lesdites cartes, que l'on peut utiliser comme texture. Ainsi, à la place que l'on ait une
impression de 3D avec le relief, on a directement accès à la représentation 3D de la carte!

Pour utiliser le rendu 3D, il faut que le 1^{er} (ou 2^{ème}) paramètre soit =-render3d=. Exemple de la 
liste de paramètres (pour une vue impressionnante d'Interlaken):

#+BEGIN_EXAMPLE
-render3d interlaken.osm.gz N46E007.hgt 7.7800 46.6445 7.9371 46.7261 
   300 interlaken.png
#+End_EXAMPLE

** Utilisation de l'interface graphique: 
- clic gauche + déplacement pour déplacer la carte en X,Y (coordonnées relatives à l'écran)
- clic droit + déplacement pour incliner la carte

** Paramètres optionnels: 
Doivent être spécifiés en 1^{er} ou 2^{ème} paramètre (il faut cependant garder les autres paramètres):

- =-render3d=: Active la génération et l'affichage de la carte en 3D
- =-skipMapCreation= permet d'éviter la génération de la carte , il faut cependant
  s'assurer que le fichier texture ainsi que la carte n'incorporant pas les
  reliefs aient déjà été générés.

* Mise en place Java

Java intègre, depuis sa version 8, JavaFX qui propose désormais du support pour les graphismes 3D.

** Changements
La classe Main a dû être changée pour devenir une =Application= (point d'entrée d'un programme qui 
utilise JavaFX). La méthode =main= a aussi dû être adaptée pour lancer l'application avec les arguments 
et ne rien faire d'autre. Tout le code JavaFX (et celui qui était avant dans =main=) se trouve dans 
la méthode overridée =start=.

La méthode =main= s'occupe désormais aussi de la gestion des paramètres optionnels =-render3d= et 
=-skipMapCreation=, de la création du mesh 3D, de l'affichage de la scène et de l'ajout 
d'=EventHandler= pour le déplacement du mesh.

** Nouveautés
La classe =Mesh3D= dans le package =dem= a été créée pour construire un mesh (de triangles) du
terrain. Le mesh se construit en trois temps: création d'un tableau de points en 3 dimensions 
représentants les sommets des triangles, création d'un tableau de points en 2 dimensions 
représentants des points d'ancrage de la texture, et un troisième tableau créant des triangles
en reliant les points donnés dans le 1er tableau ET les points des textures du 2ème tableau.
La documentation officielle ne parlant pas des particularités de ces tableaux,
il a fallu se documenter ailleurs. Les triangles ont été placés de manière naïve, en quadrillant
la zone et en subdivisant ces carrés en triangles.

Afin de pouvoir récupérer une hauteur à un point donné l'interface =DigitalElevationModel= a 
été pourvue de la méthode =getHeightAt= retournant la hauteur à un =PointGeo=. 
=HGTDigitalElevationModel= implémente donc celle-ci.

** Note sur la texture

Pour ajouter une texture à un mesh, il faut d'abord créer un =Material= (classe abstraite) dont la
seule sous-classe est =PhongMaterial= puis lui ajouter une image en temps que /DiffuseMap/. Ce type
de matériau calcule dynamiquement les ombres en prenant en compte plusieurs types de sources 
lumineuses. C'est grâce à cela qu'il n'y a pas besoin d'utiliser la carte avec les ombrages du 
relief intégrés, car tout est calculé en temps réel lorsque l'on regarde la carte.
